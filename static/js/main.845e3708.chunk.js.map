{"version":3,"sources":["dash/dash.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Dash","data","className","cellPadding","cellSpacing","props","map","item","idx","color","status","diffTime","Date","getTime","updatedAt","len","value","length","latestData","dataArray","score","key","name","toFixed","toLocaleString","limit","App","initial","useState","stox","setStoxData","ws","useRef","WebSocket","useEffect","current","onopen","console","log","onclose","close","onmessage","e","message","JSON","parse","obj","Object","fromEntries","keys","dateNow","stockData","at","currentObj","tempData","exists","filter","o","latestValue","push","prevState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"mRAgBaA,EAA+C,SAACC,GACzD,OACI,6BACI,iCACI,mDACA,yBAAKC,UAAU,cACX,2BAAOC,YAAY,IAAIC,YAAY,KACnC,+BACI,4BACA,sCACA,qCACA,2CACA,yCAKR,yBAAKF,UAAU,eACX,2BAAOC,YAAY,IAAIC,YAAY,KAC/B,+BAEQH,EAAKI,MAAMC,KAAI,SAACC,EAAMC,GAClB,IAAIC,EAAQ,MAERA,EADe,IAAhBF,EAAKG,OACI,MACe,IAAhBH,EAAKG,OACJ,MAEA,MAEZ,IAAMC,GAAmB,IAAIC,MAAOC,UAAYN,EAAKO,UAAUD,UACzDE,EAAMR,EAAKS,MAAMC,OAAS,EAC1BC,EAAaX,EAAKS,MAAMD,GAC1BI,EAAYZ,EAAKS,MAAMV,KAAI,qBAAGc,SAClC,OACI,wBAAIC,IAAKb,EAAKN,UAAWO,GACrB,4BAAKF,EAAKe,MACV,iCAAOJ,EAAWE,MAAMG,QAAQ,IAChC,4BAAKZ,GAAY,IAAO,WAAaJ,EAAKO,UAAUU,kBACpD,4BACI,kBAAC,aAAD,CAAYvB,KAAMkB,EAAWM,MAAO,IAChC,kBAAC,iBAAD,CAAgBhB,MAAM,YACtB,kBAAC,kBAAD,kBCYrCiB,EAtD2C,SAAC,GAAsB,IAAD,IAAnBC,eAAmB,MAAT,GAAS,IAClDC,mBAASD,GADyC,mBACvEE,EADuE,KACjEC,EADiE,KAE1EC,EAAKC,iBAAO,IAAIC,UAAU,8BA6C9B,OA3CAC,qBAAU,WAKN,OAHAH,EAAGI,QAAQC,OAAS,kBAAMC,QAAQC,IAAI,cACtCP,EAAGI,QAAQI,QAAU,kBAAMF,QAAQC,IAAI,cAEhC,WACHP,EAAGI,QAAQK,WAEhB,IAEHN,qBAAU,WACDH,EAAGI,UAERJ,EAAGI,QAAQM,UAAY,SAAAC,GACnB,IAAMC,EAAUC,KAAKC,MAAMH,EAAEzC,MACvB6C,EAAMC,OAAOC,YAAYL,GAC/BI,OAAOE,KAAKH,GAAKxC,KAAI,SAACe,GACpB,IAAI6B,EAAU,IAAItC,KACduC,EAAyB,CAACC,GAAIF,EAAS9B,MAAO,GAC9CiC,EAAmB,CAAE/B,KAAMD,EAAKL,MAAO,GAAIN,OAAQ,EAAGI,UAAWoC,GACjEI,EAAQ,YAAOzB,GACb0B,EAASD,EAASE,QAAO,SAAAC,GAAC,OAAIA,EAAEnC,OAASD,KAC/C,GAAGkC,EAAO,GAAI,CACZ,IAAMtD,EAAOsD,EAAO,GACdxC,EAAMd,EAAKe,MAAMC,OAAS,EAC1ByC,EAAczD,EAAKe,MAAMD,GAAKK,MAQpC,OAPGsC,EAAcZ,EAAIzB,GACnBpB,EAAKS,QAAU,EACPgD,EAAcZ,EAAIzB,KAC1BpB,EAAKS,OAAS,GAEhByC,EAAU/B,MAAQ0B,EAAIzB,GACtBpB,EAAKe,MAAM2C,KAAKR,GACTrB,EAAYwB,GAKnB,OAHAH,EAAU/B,MAAQ0B,EAAIzB,GACtBgC,EAAWrC,MAAM2C,KAAKR,GACtBE,EAAW3C,OAAS,EACboB,GAAY,SAAA8B,GAAS,4BAAQA,GAAR,CAAmBP,cAIxD,CAACxB,IAEF,yBAAK3B,UAAU,OACb,kBAAC,EAAD,CAAMG,MAAOwB,MCrDCgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMnC,c","file":"static/js/main.845e3708.chunk.js","sourcesContent":["import React, { FunctionComponent } from 'react';\nimport './dash.css';\nimport { Sparklines, SparklinesLine,  SparklinesSpots} from 'react-sparklines';\n\ninterface stockHistory {\n    at: Date, \n    score: number\n}\n\ninterface stock {\n    name: string,\n    value: Array<stockHistory>,\n    status: number,\n    updatedAt: Date\n}\n\nexport const Dash:FunctionComponent<{props:Array<stock>}> = (data) => {\n    return (\n        <div>\n            <section>\n                <h1>FINANCIAL DASHBOARD</h1>\n                <div className=\"tbl-header\">\n                    <table cellPadding=\"0\" cellSpacing=\"0\">\n                    <thead>\n                        <tr>\n                        <th>Ticker</th>\n                        <th>Price</th>\n                        <th>Last Update</th>\n                        <th>Graph</th>\n                        </tr>\n                    </thead>\n                    </table>\n                </div>\n                <div className=\"tbl-content\">\n                    <table cellPadding=\"0\" cellSpacing=\"0\">\n                        <tbody>\n                            { \n                                data.props.map((item, idx) => {\n                                    let color = 'new';\n                                    if(item.status === 1) {\n                                        color = 'inc'\n                                    } else if (item.status === 0) {\n                                        color = 'new'\n                                    } else {\n                                        color = 'dec'\n                                    }\n                                    const diffTime: number = new Date().getTime() - item.updatedAt.getTime();\n                                    const len = item.value.length - 1;\n                                    const latestData = item.value[len];\n                                    var dataArray = item.value.map(({ score }) => score);\n                                    return (\n                                        <tr key={idx} className={color}>\n                                            <td>{item.name}</td>\n                                            <td>$ {latestData.score.toFixed(2)}</td>\n                                            <td>{diffTime <= 1000 ? 'Just now' : item.updatedAt.toLocaleString()}</td>\n                                            <td>\n                                                <Sparklines data={dataArray} limit={20}>\n                                                    <SparklinesLine color=\"#1c8cdc\" />\n                                                    <SparklinesSpots />\n                                                </Sparklines>\n                                            </td>\n                                        </tr>\n                                    )\n                                })\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </section>\n        </div>\n    )\n}","import React, { FunctionComponent, useEffect, useState, useRef } from 'react';\nimport './App.css';\nimport { Dash } from './dash/dash';\n\ninterface stockHistory {\n  at: Date, \n  score: number\n}\n\ninterface stock {\n  name: string,\n  value: Array<stockHistory>,\n  status: number,\n  updatedAt: Date\n}\n\nconst App:FunctionComponent<{ initial?: Array<stock> }> = ({ initial = [] }) => {\n  const [stox, setStoxData] = useState(initial);\n  let ws = useRef(new WebSocket(\"ws://stocks.mnet.website/\"));\n\n  useEffect(() => {\n      // ws.current = new WebSocket(\"ws://stocks.mnet.website/\");\n      ws.current.onopen = () => console.log(\"ws opened\");\n      ws.current.onclose = () => console.log(\"ws closed\");\n\n      return () => {\n          ws.current.close();\n      };\n  }, []);\n\n  useEffect(() => {\n      if (!ws.current) return;\n\n      ws.current.onmessage = e => {\n          const message = JSON.parse(e.data);\n          const obj = Object.fromEntries(message);\n          Object.keys(obj).map((key) => {\n            let dateNow = new Date()\n            let stockData:stockHistory = {at: dateNow, score: 0.0};\n            let currentObj:stock = { name: key, value: [], status: 0, updatedAt: dateNow};\n            let tempData = [...stox]\n            const exists = tempData.filter(o => o.name === key);\n            if(exists[0]) {\n              const data = exists[0];\n              const len = data.value.length - 1;\n              const latestValue = data.value[len].score;\n              if(latestValue > obj[key]) {\n                data.status = -1\n              } else if(latestValue < obj[key]) {\n                data.status = 1\n              }\n              stockData.score = obj[key];\n              data.value.push(stockData)\n              return setStoxData(tempData);\n            } else {\n              stockData.score = obj[key];\n              currentObj.value.push(stockData);\n              currentObj.status = 1\n              return setStoxData(prevState => [...prevState, currentObj]);\n            }\n          })\n      };\n  }, [stox]);\n  return (\n    <div className=\"App\">\n      <Dash props={stox}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}